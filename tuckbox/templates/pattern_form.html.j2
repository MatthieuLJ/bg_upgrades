<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<head>
    <title>Build a tuckbox</title>

    {% load static %}

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="{% static 'tuckbox/favicon.svg' %}">
    <link rel="alternate icon" href="{% static 'tuckbox/favicon.png' %}">

    <!-- Include jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <!-- cookie plugin -->
    <script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>

    <!-- Include Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"
        integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
        integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">

    <!-- Include Bootstrap toggle -->
    <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css"
        rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>

    <!-- Color picker -->
    <script src="https://unpkg.com/vanilla-picker@2"></script>

    <!-- Name that color -->
    <script type="text/javascript" src="https://chir.ag/projects/ntc/ntc.js"></script>

    <!-- Three JS -->
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>

    <!-- Include our own CSS -->
    <link rel="stylesheet" type="text/css" href="{% static 'tuckbox/style.css' %}">
    <script src="{% static 'tuckbox/3d-box.js' %}"></script>

    <script type="text/javascript">
        'use strict';

        // Some constants for paper sizes:
        const paper_a4 = {
            "width": 210,
            "height": 297
        };

        const paper_a3 = {
            "width": 297,
            "height": 420
        };

        const paper_letter = {
            "width": 216,
            "height": 279
        };

        const paper_legal = {
            "width": 216,
            "height": 356
        };

        let request_in_progress = false;

        function change_wont_fit_display(show) {
            if (show) {
                $("#id_wont_fit").css('display', '');
            } else {
                $("#id_wont_fit").css('display', 'none');
            }
        }

        function change_progress_display(show) {
            request_in_progress = show;
            if (show) {
                $("#id_progress_container").css('display', '');
            } else {
                $("#id_progress_container").css('display', 'none');
            }
            check_to_enable_submit();
        }

        // entry point for any number field changing
        function check_number(field) {
            change_wont_fit_display(false);

            if (field.value != "" && (isNaN(field.value) || (field.value < 0))) {
                $(field).css('color', 'red');

                check_to_enable_submit();
            } else {
                $(field).css('color', 'black');
                // check if all other dimension fields have valid data
                check_for_preview();
            }
        }

        // check if all fields are not empty and valid
        function check_for_all_fields_valid() {
            let fields_to_check = [$("#id_height"), $("#id_width"), $("#id_depth")];
            if ($("#id_paper_size").val() == "Custom") {
                fields_to_check.concat([$("#id_paper_height"), $("#id_paper_width")]);
            }
            let valid = true;
            fields_to_check.forEach(function (field) {
                if (field.val() == "" || isNaN(field.val()) || field.val() < 0) {
                    valid = false;
                }
            });

            return valid;
        }

        // check if we should show the preview
        function check_for_preview() {
            let valid = check_for_all_fields_valid();

            if (valid) {
                // show a 3D model
                generate_preview();

                // check if the pattern will fit on paper
                check_pattern_fit();
            } else {
                $("#image_preview").empty();

                check_to_enable_submit();
            }
        }

        // Draw a 3D box
        function generate_preview() {
            let data = {};
            data.tuckbox = {};
            ["width", "height", "depth"].forEach(dim => {
                data.tuckbox[dim] = parseInt($("#id_" + dim).val())
            });

            draw_3d_box($("#image_preview"), data);
        }

        function check_pattern_fit() {
            let data = {
                "tuckbox": {
                    "width": parseInt($('#id_width').val()),
                    "height": parseInt($('#id_height').val()),
                    "depth": parseInt($('#id_depth').val())
                },
                "paper": {
                    "width": parseInt($("#id_paper_width").val()),
                    "height": parseInt($("#id_paper_height").val())
                },
                "options": {
                    "two_openings": $("#id_two_openings").prop('checked')
                }
            };
            //console.log("checking for fit:"+JSON.stringify(data));

            $.ajaxSetup({
                headers: { "X-CSRFToken": Cookies.get("csrftoken") }
            });

            $.post('check_fit', JSON.stringify(data), check_fit_response).fail(check_fit_response);
        }

        function check_fit_response(data, status) {
            if (status != "success") {
                change_wont_fit_display(true);
            } else {
                change_wont_fit_display(false);
            }
            check_to_enable_submit();
        }

        function check_to_enable_submit() {
            let valid = check_for_all_fields_valid();

            if (($("#id_wont_fit").css('display') == 'none') &&
                (!request_in_progress) &&
                (valid)) {
                $("#id_submit").prop('disabled', false);
            }
            else {
                $("#id_submit").prop('disabled', true);
            }
        }

        function check_for_result(data, status) {
            if (status != "success") {
                // TODO: show/log some error
                change_progress_display(false);
            } else if (data.state == 'SUCCESS') {
                window.open(data.info, "_blank", "location=no, menubar=no");
                change_progress_display(false);
            } else if (data.state == 'FAILURE') {
                alert("Something went wrong\n"+data.info);
                // TODO: show/log some error
                change_progress_display(false);
            } else if ((data.state == 'STARTED') || (data.state == 'SAVING')) {
                console.log("Got progress: "+data.info.percent)
                if (data.state == 'STARTED') {
                    update_progress(data.info.percent, 'process');
                } else {
                    update_progress(data.info.percent, 'saving');
                }
                let send_data = {'task_id': data.task_id};
                setTimeout(function() {
                    $.get('check_progress', send_data, check_for_result);
                }, 500);
            } else {
                let send_data = {'task_id': data.task_id};
                setTimeout(function() {
                    $.get('check_progress', send_data, check_for_result);
                }, 500);
            }
        }

        let saving_progress = 0;
        function update_progress(percent, mode) {
            if (mode == 'upload') {
                $("#id_progress").text("Uploading");
                saving_progress = 0;
            } else if (mode == 'process') {
                $("#id_progress").text("Processing");
            } else if (mode == 'saving') {
                if (saving_progress < 90) {
                    saving_progress += 10;
                } else if (saving_progress < 99) {
                    saving_progress += 1;
                }
                $("#id_progress").text("Saving");
                percent = saving_progress;
            }
            $("#id_progress").attr("aria-valuenow", percent).css("width", percent+"%");
        }

        // Entry function when the page is loaded
        $(function () {
            // Disable the default form submission and redirect to Ajax
            $("#id_form").submit(function(event) {
                change_progress_display(true);

                // Stop the submit button from submitting the form.
                event.preventDefault();

                let postData = new FormData($(this)[0]);

                // do not upload image files if we are using plain colors
                ["front", "back", "left", "right", "top", "bottom"].forEach(function (face, index) {
                    if ($("#id_" + face + "_plain_color").prop('checked')) {
                        postData.delete(face);
                    }
                });

                //console.log(JSON.stringify(postData.entries(), null, 2));

                // Submit the form using AJAX.
                $.ajax({
                    async: true,
                    type: 'POST',
                    url: $(this).attr('action'),
                    data: postData,
                    contentType: false,
                    processData: false,
                    timeout: 60000,
                    xhr: function()
                        {
                            let xhr = new window.XMLHttpRequest();
                            //Upload progress
                            xhr.upload.onprogress = function(evt){
                                if (evt.lengthComputable) {
                                    let percentComplete = 100 * evt.loaded / evt.total;
                                    update_progress(Math.round(percentComplete), 'upload');
                                }
                            };
                            xhr.upload.onload = function() { console.log("Done uploading!");};
                            return xhr;
                        },
                }).then(function(response) {
                    // Open a new page with the pdf data
                    //alert("Request completed with task_id: " + response.task_id);

                    // Get the output 10s later
                    check_for_result({'task_id': response.task_id, 'state': "not yet"}, "success");
                }).fail(function(data) {
                    if (data.responseText != '') {
                        alert(data.responseText);
                    } else {
                        alert("Oops! An error occured, it's not you, it's me.");
                    }
                    change_progress_display(false);
                });
            });

            // Nothing is running to start
            change_progress_display(false);

            // For all the elements with the "tuck_input_num" class
            // hook the check number function
            $(".tuck_input_num").change(function () { check_number(this); });

            $("#id_paper_size").change(function () {
                change_wont_fit_display(false);

                if (this.value == "Custom") {
                    $(".paper_custom").css('display', '');
                } else {
                    $(".paper_custom").css('display', 'none');
                    switch (this.value) {
                        case "Letter":
                            $("#id_paper_height").val(paper_letter.height);
                            $("#id_paper_width").val(paper_letter.width);
                            break;
                        case "Legal":
                            $("#id_paper_height").val(paper_legal.height);
                            $("#id_paper_width").val(paper_legal.width);
                            break;
                        case "A4":
                            $("#id_paper_height").val(paper_a4.height);
                            $("#id_paper_width").val(paper_a4.width);
                            break;
                        case "A3":
                            $("#id_paper_height").val(paper_a3.height);
                            $("#id_paper_width").val(paper_a3.width);
                            break;
                    }
                }
                check_for_preview();
            }).trigger("change");

            $("#id_two_openings").change(function() {
                open_bottom($("#id_two_openings").prop('checked'));
                check_pattern_fit();
                });

            let color_buttons = [], color_pickers = [];
            
            ["front", "back", "left", "right", "top", "bottom"].forEach(function (face, index) {
                $("#id_" + face).change(function () {
                    let file = $(this)[0].files[0];

                    if (file && file.type.split("/")[0] == "image") {
                        load_face_image(file, index + 1);
                    } else {
                        clear_face_image(index+1);
                    }
                    if (file && "name" in file) {
                        $(this).next().html(file.name);
                    } else {
                        $(this).next().html("");
                    }
                });
                $("#id_rotate_" + face).click(function () {
                    $("#id_" + face + "_angle").val((index, currentValue) => { return (parseInt(currentValue) + 1) % 4; });
                    rotate_face_image($("#id_" + face + "_angle").val(), index + 1)
                    $("#id_" + face).trigger("change");
                });
                $("#id_clear_" + face).click(function() {
                    $("#id_" + face).val("").trigger("change").next().html();
                });
                $("#id_" + face + "_plain_color").change(function() {
                    set_face_usage($(this).prop("checked"), index + 1)
                });

                color_buttons[face] = $("#id_color_" + face)[0];
                color_pickers[face] = new Picker({parent: color_buttons[face], 
                                           alpha: false,
                                           editor: false,
                                           popup: 'left',
                                           color: 0xffffff,
                                           editorFormat: 'rgb'});
                color_pickers[face].onDone = function(color) {
                    let hex_color = color.hex.substring(0, color.hex.length - 2)
                    // find the name of that color
                    let color_name = ntc.name(hex_color)[1];
                    // update the button with the background color and text
                    color_buttons[face].style.backgroundColor = color.rgbaString;
                    color_buttons[face].textContent = color_name;
                    // check the brightness
                    var luminance = ( 0.299 * color.rgba[0] + 0.587 * color.rgba[1] + 0.114 * color.rgba[2])/255;
                    color_buttons[face].style.color = (luminance < 0.5) ? "white" : "black";

                    load_face_color(hex_color, index + 1);
                    $("#id_" + face + "_color").val(hex_color);
                }
            });
        });
    </script>
</head>

<body>
    <h1>Build a tuckbox</h1>

    <!-- Courtesy from http://tholman.com/github-corners/ -->
    <a href="https://github.com/MatthieuLJ/bg_upgrades" class="github-corner" aria-label="View source on GitHub" target="_blank"><svg
            width="80" height="80" viewBox="0 0 250 250"
            style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true">
            <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
            <path
                d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
                fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path>
            <path
                d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"
                fill="currentColor" class="octo-body"></path>
        </svg></a>
    <style>
        .github-corner:hover .octo-arm {
            animation: octocat-wave 560ms ease-in-out
        }

        @keyframes octocat-wave {

            0%,
            100% {
                transform: rotate(0)
            }

            20%,
            60% {
                transform: rotate(-25deg)
            }

            40%,
            80% {
                transform: rotate(10deg)
            }
        }

        @media (max-width:500px) {
            .github-corner:hover .octo-arm {
                animation: none
            }

            .github-corner .octo-arm {
                animation: octocat-wave 560ms ease-in-out
            }
        }
    </style>

    <form action="{% url 'pattern' %}" id="id_form" method="post" target="_blank" class="form-horizontal"
        enctype="multipart/form-data">
        {% csrf_token %}

        <div class="form-group row top-row">
            <label class="form-control-label col-3 align-self-center"> Paper size: </label>
            <select id="id_paper_size" class="form-control col-7" name="paper_size">
                <option value="A4">A4</option>
                <option value="A3">A3</option>
                <option value="Letter">Letter</option>
                <option value="Legal">Legal</option>
                <option value="Custom">Custom</option>
            </select>
        </div>
        <div class="form-group row paper_custom">
            <label class="form-control-label col-3 align-self-center"> Paper Height (mm): </label>
            <input type="text" name="paper_height" id="id_paper_height" class="col-7 tuck_input_num form-control">
        </div>
        <div class="form-group row paper_custom">
            <label class="form-control-label col-3 align-self-center"> Paper Width (mm): </label>
            <input type="text" name="paper_width" id="id_paper_width" class="col-7 tuck_input_num form-control">
        </div>

        {% with dimensions='height width depth' %}
        {% for dim in dimensions.split %}
        <div class="form-group row">
            <label class="form-control-label col-3 align-self-center" for="id_{{ dim }}"> Tuckbox {{ dim|title }} (mm):</label>
            <input type="text" name="{{ dim }}" id="id_{{ dim }}" class="col-7 tuck_input_num form-control">
        </div>
        {% endfor %}
        {% endwith %}

        <div class="form-group row">
            <div id="image_preview" class="col-4 offset-md-4">
            </div>
        </div>

        {% with faces='front back left right top bottom' %}
        {% for face in faces.split %}
        <div class="form-group row image-files">
            <label class="form-control-label col-md-3 align-self-center"> {{ face|title }} image: </label>
            <div class="custom-file col-md-3">
                <input type="file" name="{{ face }}" id="id_{{ face }}" class="custom-file-input">
                <label class="custom-file-label" for="id_{{ face }}">Pick an image file...</label>
            </div>
            <div class="col-md-1" style="display: flex;">
                <button type="button" name="rotate_{{ face }}" id="id_rotate_{{ face }}"
                    class="form-control btn img-rounded icon">
                    <object type="image/svg+xml" data="{% static 'tuckbox/rotate.svg' %}">
                        Rotate
                    </object>
                </button>
                <input type="hidden" name="{{ face }}_angle" id="id_{{ face }}_angle" value="0" />
                <button type="button" name="clear_{{ face }}" id="id_clear_{{ face }}"
                    class="form-control btn img-rounded icon">
                    <object type="image/svg+xml" data="{% static 'tuckbox/broom.svg' %}">
                        Clear
                    </object>
                </button>
            </div>
            <div class="col-md-1 gx-3">
                <input id="id_{{ face }}_plain_color"  name="{{ face }}_plain_color" type="checkbox"
                    data-toggle="toggle" data-on="Color" data-off="Picture" />
            </div>
            <div class="col-md-2 gx-3">
                <input type="hidden" name="{{ face }}_color" id="id_{{ face }}_color" value="0xffffff">
                <button type="button" class="btn form_control" name="{{ face }}_color" id="id_color_{{ face }}" backgroundColor="white">
                    White
                </button>
            </div>
        </div>
        {% endfor %}
        {% endwith %}

        <div class="form-group row">
            <label class="form-control-label col-md-2 offset-md-2 align-self-center"> Folding guides: </label>
            <div class="col-md-1">
                <input type="checkbox" name="folding_guides" id="id_folding_guides" data-toggle="toggle" data-on="On"
                    data-off="Off">
            </div>
            <label class="form-control-label col-md-2 align-self-center"> On-pattern folds: </label>
            <div class="col-md-1">
                <input type="checkbox" name="folds_dashed" id="id_folds_dashed" data-toggle="toggle" data-on="On"
                    data-off="Off" />
            </div>
        </div>
        <div class="form-group row">
            <label class="form-control-label col-md-2 offset-md-2 align-self-center"> Openings on both sides: </label>
            <div class="col-md-1">
                <input type="checkbox" name="two_openings" id="id_two_openings" data-toggle="toggle" data-on="On"
                    data-off="Off" />
            </div>
            <label class="form-control-label col-md-2 align-self-center"> Two pages: </label>
            <div class="col-md-1">
                <input type="checkbox" name="two_pages" id="id_two_pages" data-toggle="toggle" data-on="On"
                    data-off="Off" />
            </div>
        </div>

        <div id="id_wont_fit" class="form-group row">
            <div class="col-md-4 offset-md-4">
                The pattern is too large
            </div>
        </div>
        <div class="row" id="id_progress_container">
            <div class="progress col-md-4 offset-md-4">
                <div class="progress-bar progress-bar-striped progress-bar-animated" id="id_progress" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
        <div class="form-group row">
            <button id="id_submit" class="form-control col-md-4 offset-md-4">
            Generate PDF
            </button>
        </div>
    </form>
    <p class="text-center text-muted"><small><a href="{% url 'about' %}" style="text-decoration:inherit; color:inherit">About</a></small></p>
</body>
